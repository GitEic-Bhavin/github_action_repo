# name: my first pipeline
# # on: [ push, workflow_dispatch]
# on:
#   issues:
#     types: 
#       - opened
#   workflow_dispatch:
#   push:
#     # branches:
#     #   - main
#     branches-ignore: 
#       - main 
# jobs:
#   first-job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: clone repo
#         uses: actions/checkout@v4
#       - name: install node 18
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18
#       - name: npm ci
#         run: npm ci
#         working-directory: second-action-react
#       - name: npm test
#         run: npm run test
#         working-directory: second-action-react


#   deploy_job:
#     needs: first-job
#     runs-on: ubuntu-latest
#     steps:
#       - name: clone repo
#         uses: actions/checkout@v4
#       - name: install npm
#         uses: actions/setup-node@v4
#         with:
#           node-version: 18
#       - name: npm install 
#         run: npm ci
#         working-directory: second-action-react
#       - name: npm build
#         run: npm run build
#         working-directory: second-action-react
        
#   build:
#     needs: deploy_job
#     runs-on: ubuntu-latest
#     steps:
#       - name: clone repo
#         uses: actions/checkout@v4
#       - name: npm ci
#         run: npm ci
#         working-directory: second-action-react
#       - name: npm build
#         run: npm run build
#         working-directory: second-action-react
#       - name: show output of dest dir
#         working-directory: second-action-react
#         # run: find dist/assets/*.js -type f -execdir echo '{}' ';'
#         # This will find *.js file in /dist/assest dir, and execute echo command and show it into {}.
#         # run: find dist/assets/*js -type f -execdir echo 'output-var={}' ';'
#         # This will store the output of find command into var named 'output-var' by echo.
#         run: | 
#           find dist/assets/*.js -type f -execdir echo 'output-var={}' >> $GITHUB_OUTPUT ';'
#           echo $GITHUB_OUTPUT

#         # This will store output of var named 'output-var' into the
#       - name: upload artifact
#         uses: actions/upload-artifact@v4
#         with:
#           path: |
#             dist
#             second-action-react
#           name: my-test-artifact 
        
#### TEST
name: my-first-pipeline
on: 
  pull_request:
    types:
      - opened
      - closed
  push:
    branches: 
      - master
jobs:
  create:
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: install npm
        uses: actions/setup-node@v4
        with:
          node-version: 18
  test:
    needs: create
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v4
      - name: npm install
        run: npm ci
        working-directory: second-action-react
      - name: npm test
        run: npm run test
        working-directory: second-action-react
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: npm install
        run: npm ci
        working-directory: second-action-react
      - name: build npm
        working-directory: second-action-react
        run: npm run build
      - name: ensure dist directory created
        run: find dist/assets/*.js
        working-directory: second-action-react
      - name: see workflows datains once.
        run: echo "${{ toJson(github) }}"

  upload_artifacts:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: npm install
        run: npm ci
        working-directory: second-action-react
      - name: build npm
        working-directory: second-action-react
        run: npm run build
      - name: upload artifact
        uses: actions/upload-artifact@v4
        id: upload
        with:
          name: my-artifact
          path: second-action-react/dist/
      - name: ensure artifact was uploaded
        run: ls -ltr second-action-react/
        if: success() && steps.upload.outcome == 'success'

  downloaded_artifact:
    needs: upload_artifacts
    runs-on: ubuntu-latest
    # outputs:
    #   test-output:

    steps:
      - name: checkout repo
        uses: actions/checkout@v3
      - name: downloaded artifact
        uses: actions/download-artifact@v4
        id: Download
        with:
          name: my-artifact
      - name: show downloaed artifact
        run: ls -ltr second-action-react/
        id: output-run
        # if: success() && steps.Download.outcome == 'success'
      - name: Print output from previous step
        run: |
          echo "Output from output-run step: ${{ steps.output-run.outputs.test-output }}"
      
  cache:
    runs-on: ubuntu-latest
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: use cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: my-cache-${{ hashFiles('**package-lock.json') }}
      - name: npm ci
        run: npm ci
        working-directory: second-action-react

      # - name: Cache all npm steps.
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.npm
      #     key: retrive-cache-key-${{ hashFiles('**/package-lock.json') }}
    